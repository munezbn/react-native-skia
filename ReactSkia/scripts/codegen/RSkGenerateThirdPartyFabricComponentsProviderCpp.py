#!/usr/bin/python

# Copyright (C) 1994-2023 OpenTV, Inc. and Nagravision S.A.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

import sys

# Function to generate RSkThirdPartyFabricComponentsProvider.Cpp
def generateThirdPartyFabricComponentsProviderCpp(buildGenPath, lookupMap):
  print('Generating RSkThirdPartyFabricComponentsProvider.Cpp...')
  TPFabricComponentProviderTemplate = '''/**
 * This code was generated by ReactNativeSKia codegn.
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by GenerateRCTThirdPartyFabricComponentsProviderCpp ''' + sys.argv[0] + '''
 */

#include "RSkThirdPartyFabricComponentsProvider.h"

#include <string>
#include <unordered_map>

#include "ReactSkia/utils/RnsLog.h"

namespace facebook {
namespace react {

RSkComponentProviderProtocol RSkThirdPartyFabricComponentsProvider(const char *componentName) {
  static std::unordered_map<std::string, RSkComponentProviderProtocol> fabricComponentsClassMap = {\n'''+ lookupMap +'''  };

  RNS_LOG_TRACE("Look up for component : " << componentName << " in thirdparty provider");

  auto p = fabricComponentsClassMap.find(componentName);
  if (p != fabricComponentsClassMap.end()) {
    RNS_LOG_INFO("Found component : " << componentName << " in thirdparty provider");
    auto classFunc = p->second;
    return classFunc;
  }

  RNS_LOG_WARN("Could not find component : " << componentName << " in thirdparty provider");
  return nullptr;
}

} // namespace react
} // namespace facebook'''

  cppFilePath = sys.argv[1] + '/'+'RSkThirdPartyFabricComponentsProvider.cpp'
  gnf= open( cppFilePath, "w+")
  gnf.write(TPFabricComponentProviderTemplate)
  gnf.close()
# End of function generateThirdPartyFabricComponentsProviderCpp()
