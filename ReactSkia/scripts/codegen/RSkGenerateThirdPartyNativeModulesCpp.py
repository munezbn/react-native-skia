#!/usr/bin/python

# Copyright (C) 1994-2023 OpenTV, Inc. and Nagravision S.A.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

import sys

# Function to generate RSkThirdPartyNativeModulesProvider.Cpp
def generateThirdPartyNativeModulesProviderCpp(buildGenPath, lookupMap):
  print('Generating RSkThirdPartyNativeModulesProvider.Cpp...')
  TPNativeModuleTemplate = '''/**
 * This code was generated by ReactNativeSKia codegn.
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by GenerateRCTThirdPartyNativeModulesProviderCpp ''' + sys.argv[0] + '''
 */

#include <string>
#include <unordered_map>

#include "ReactSkia/utils/RnsLog.h"

#include "RSkThirdPartyNativeModulesProvider.h"

namespace facebook {
namespace react {

RSkLegacyNativeModuleProviderProtocol RSkThirdparyNativeModuleCreatorClassWithName(std::string moduleName) {
  static std::unordered_map<std::string, RSkLegacyNativeModuleProviderProtocol> nativeModulesClassMap = {\n'''+ lookupMap +'''  };
  RNS_LOG_TRACE("Look up for module : " << moduleName << " in thirdparty provider");

  auto p = nativeModulesClassMap.find(moduleName);
  if (p != nativeModulesClassMap.end()) {
    RNS_LOG_INFO("Found module : " << moduleName << " in thirdparty provider");
    auto classFunc = p->second;
    return classFunc;
  }

  RNS_LOG_WARN("Could not find module : " << moduleName << " in thirdparty provider");
  return nullptr;
}

} // namespace react
} // namespace facebook'''

  cppFilePath = sys.argv[1] + '/'+'RSkThirdPartyNativeModulesProvider.cpp'
  gnf= open( cppFilePath, "w+")
  gnf.write(TPNativeModuleTemplate)
  gnf.close()
# End of function generateThirdPartyNativeModulesProviderCpp()
